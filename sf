#!/bin/bash

set -o nounset

DB_NAME="science_feedback"
APP_NAME="sciencefeedback"
COMMAND_NAME="sf"
EXTENSION="co"
COLLECTIONS="\\\"user\\\",review,article,role"

PRG="$BASH_SOURCE"

while [ -h "$PRG" ] ; do
	ls=`ls -ld "$PRG"`
	link=`expr "$ls" : '.*-> \(.*\)$'`
	if expr "$link" : '/.*' > /dev/null; then
		PRG="$link"
	else
		PRG=`dirname "$PRG"`"/$link"
	fi
done

ROOT_PATH=$(realpath $(dirname "$PRG"))

function confirm {
 read -p "$1 (y/n) : " -n 1 -r
 echo
 if [[ ! $REPLY =~ ^[Yy]$ ]]
 then
   exit
 fi
}

function ensure_remote {
  if [[ "$ENV" == "development" ]]; then
    echo "$1"
    exit 3
  fi
}

if [[ $# -gt 2 ]] && [[ "$1" == "-e" ]]; then
  ENV=$2
  shift 2
else
  ENV=${ENV:-'development'}
fi

if [[ "$ENV" == "development" ]]; then
	API_HOST='localhost:80'
elif [[ "$ENV" == "production" ]]; then
	API_HOST=backend.$APP_NAME.$EXTENSION
elif [[ "$ENV" == "staging" ]]; then
	API_HOST=backend-$ENV.$APP_NAME.$EXTENSION
fi

if [[ "$1" == "" ]]; then
  echo "Usage : $COMMAND_NAME <command> [arguments]"
  exit
fi

CMD="$1"
shift

echo $CMD

if [[ "$ENV" == "production" ]]; then
	SCALINGO_APP=$APP_NAME-backend
elif [[ ! "$ENV" == "development" ]]; then
	SCALINGO_APP=$APP_NAME-backend-$ENV
fi

if [[ "$CMD" == "alembic" ]]; then
  RUN='docker exec `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src && PYTHONPATH=. alembic '"$*"'"'
elif [[ "$CMD" == "bash" ]]; then
	if [[ "$ENV" == "development" ]]; then
		RUN='docker exec -it `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src/ && PYTHONPATH=. bash '"$CMD $*"'"'
	else
		scalingo -a "$SCALINGO_APP" run "bash"
		exit
	fi
elif [[ "$CMD" == "deploy-backend" ]]; then
  cd "$ROOT_PATH/flask"
  if [[ ! "$ENV" == 'production' ]] && [[ ! "$ENV" == 'staging' ]]; then
     echo "Can only deploy-backend in staging and production"
     exit
  fi
  commit_to_deploy=`git log -n 1 --pretty=format:%H`
  current_branch=$(git symbolic-ref -q HEAD)
  current_branch=${current_branch##refs/heads/}
  function exit_restoring_branch
    {
    git checkout "$current_branch"
    exit
    }
  git fetch
  git checkout master
  git pull || exit_restoring_branch
  git checkout staging
  git pull || exit_restoring_branch
  git checkout production
  git pull || exit_restoring_branch
  if [[ `git tag -l --points-at $commit_to_deploy | wc -l` == 0 ]]; then
    echo "ERROR: Can only deploy tagged commits"
    exit_restoring_branch
  fi
  if [[ "$ENV" == "production" ]]; then
    staging_commit=`git log -n 1 --pretty=format:%H staging`
    if [[ "$staging_commit" != "$commit_to_deploy" ]]; then
      echo "ERROR: Can only deploy in production commits that are also deployed in staging"
      exit_restoring_branch
    fi
  fi
  git checkout $ENV
  git merge $commit_to_deploy
  git push origin $ENV
  exit_restoring_branch
elif [[ "$CMD" == "deploy-web" ]]; then
	ensure_remote "Deploy fontend cannot be run on the local environment. Use (for example) \"$COMMAND_NAME -e staging "$CMD"\"."

	APP_PATH=$ROOT_PATH/web
	cd $APP_PATH

	(set -a; source "$APP_PATH/config/run_envs/$ENV" && yarn build) || exit

	# Add generic redirects for netlify which work with everything routed to
	# index.htm and relative paths to main.js and main.css for phonegap
	JSPATH=`grep -o '\./static/js/main\.[a-z0-9]*\.js' build/index.html`
	JSHASH=`echo "$JSPATH" | cut -d\. -f 3`
	CSSPATH=`grep -o '\./static/css/main\.[a-z0-9]*\.css' build/index.html`
	CSSHASH=`echo "$CSSPATH" | cut -d\. -f 3`

	echo "/:path1/main.$JSHASH.js /$JSPATH 301" > build/_redirects
	echo "/:path1/:path2/main.$JSHASH.js /$JSPATH 301" >> build/_redirects
	echo "/:path1/:path2/:path3/main.$JSHASH.js /$JSPATH 301" >> build/_redirects
	echo "/:path1/:path2/:path3/:path4/main.$JSHASH.js /$JSPATH 301" >> build/_redirects
	echo "/:path1/:path2/:path3/:path4/:path5/main.$JSHASH.js /$JSPATH 301" >> build/_redirects
	echo "/:path1/:path2/:path3/:path4/:path5/:path6/main.$JSHASH.js /$JSPATH 301" >> build/_redirects

	echo "/:path1/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects
	echo "/:path1/:path2/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects
	echo "/:path1/:path2/:path3/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects
	echo "/:path1/:path2/:path3/:path4/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects
	echo "/:path1/:path2/:path3/:path4/:path5/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects
	echo "/:path1/:path2/:path3/:path4/:path5/:path6/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects

	cat "public/_redirects" >> build/_redirects

	GIT_VERSION=`git log -n 1 --pretty=format:%h`
	git diff-index HEAD --quiet --exit-code
	if [[ "$?" -gt "0" ]]; then
		GIT_VERSION="$GIT_VERSION*"
	fi
	sed -i -e "s/##VERSION##/"$GIT_VERSION"/" build/$JSPATH;

	netlify deploy -e "$ENV"

	delivery_date=`( date --version 2>/dev/null | grep -q GNU\  && date +'%F_%H-%M-%S%N' ) || ( which gdate &>/dev/null && gdate +'%F_%H-%M-%S%N' ) || ( which python &> /dev/null && python -c 'import datetime; print datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S%f")' ) || ( date +'%F_%H-%M-%S' )`
	delivery_date=${delivery_date:0:21}
	tagname="deployed-$ENV-$delivery_date"
	git tag $tagname
	git push origin $tagname
	exit

elif [[ "$CMD" == "install" ]]; then
  RUN='cd $ROOT_PATH;
       git submodule init;
       git submodule update;
       git submodule foreach git checkout master;
			 cd $ROOT_PATH/web;
			 yarn;'

elif [[ "$CMD" == "psql" ]]; then
	COLUMNS=${COLUMNS:-''};
	if [[ "$ENV" == "production" ]]; then
		scalingo -a $APP_NAME-backend pgsql-console
		exit
	elif [[ "$ENV" == "staging" ]]; then
		scalingo -a $APP_NAME-backend-staging pgsql-console
		exit
	elif [[ "$ENV" == "testing" ]]; then
		scalingo -a $APP_NAME-backend-testing pgsql-console
		exit
	else
		RUN='docker exec -it `docker ps | grep postgres | cut -d" " -f 1` bash -c "COLUMNS=\"'$COLUMNS'\" psql -U '$DB_NAME'_user '$DB_NAME' $*"'
	fi
elif [[ "$CMD" == "python" ]]; then
	if [[ "$ENV" == "development" ]]; then
		RUN='docker exec -it `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src/ && PYTHONPATH=. python -i scripts/shell.py '"$CMD $*"'"'
	else
		scalingo -a "$SCALINGO_APP" run "python -i scripts/shell.py"
		exit
	fi
elif [[ "$CMD" == "rebuild-backend" ]]; then
  RUN='docker-compose build --no-cache;'
elif [[ "$CMD" == "restart-backend" ]]; then
 RUN='rm -rf $ROOT_PATH/flask/static/object_store_data;
      rm -rf $ROOT_PATH/flask/postgres_data;
      cd $ROOT_PATH && docker-compose up --force-recreate'
elif [[ "$CMD" == "shared" ]]; then
	RUN='cd $ROOT_PATH/shared && yarn run compile;
			 cd $ROOT_PATH/web/node_modules && ln -sf ../../shared pass-culture-shared;
			'
elif [[ "$CMD" == "start-backend" ]]; then
  RUN='cd $ROOT_PATH && docker-compose up'
elif [[ "$CMD" == "start-web" ]]; then
	RUN='cd $ROOT_PATH/web && yarn start'
elif [[ "$CMD" == "clean-all-database" ]]; then
  RUN='docker exec `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src/ && PYTHONPATH=. python scripts/clean.py'
elif [[ "$CMD" == "clean-all-storage" ]]; then
	RUN='rm -rf $ROOT_PATH/flask/static/object_store_data;'
elif [[ "$CMD" == "test-backend" ]]; then
  if [[ $# == 0 ]]; then
    confirm "Warning: your database will be wiped. Is this OK ?"
     "$ROOT_PATH"/$COMMAND_NAME -e $ENV clean-all-database
     RUN='docker exec `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src/ && rm -rf static/object_store_data/thumbs/* && PYTHONPATH=. pytest --color=yes -rsx -v tests"'
  else
     RUN='docker exec `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src/ && rm -rf static/object_store_data/thumbs/* && PYTHONPATH=. pytest --color=yes -rsx -v '"$*"'"'
  fi
elif [[ "$CMD" == "test-cafe-web" ]]; then
	APP_PATH=$ROOT_PATH/web
	SANDBOX_NAME="ci"
	if [[ $# == 0 ]]; then
		confirm "Warning: your database will be wiped. Is this OK ?"
	 	"$ROOT_PATH"/$COMMAND_NAME -e $ENV clean-all-database
		"$ROOT_PATH"/$COMMAND_NAME -e $ENV sandbox --name="$SANDBOX_NAME"
		RUN='cd $APP_PATH && ./scripts/manager.js testcafe '
	else
  	RUN='cd $APP_PATH && ./scripts/manager.js testcafe '"$*"
	fi
else
	RUN='docker exec `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src/ && PYTHONPATH=. python scripts/manager.py '"$CMD $*"'"'
fi

if [[ $PWD == "/home/deploy/science-feedback-main" ]]; then
	echo $RUN
  eval $RUN
else
	if [[ "$ENV" == "production" ]]; then
	  echo "$RUN" | ssh deploy@backend-staging.$APP_NAME.$EXTENSION bash
	elif [[ "$ENV" == "staging" ]]; then
	  echo "$RUN" | ssh deploy@backend.$APP_NAME.$EXTENSION bash
	else
		echo $RUN
	  eval $RUN
	fi
fi
