# Python CircleCI 2.0 configuration file
version: 2
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: "~/api-ci"
    docker:
      - image: circleci/python:3.7.0 # ...with this image as the primary container; this is where all `steps` will run
        environment:
          POSTGRES_URL: postgresql://$DB_NAME_user:$DB_NAME_password@localhost:5432/$DB_NAME
      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_DB: $DB_NAME
          POSTGRES_PASSWORD: $DB_NAME_password
          POSTGRES_USER: $DB_NAME_user
    steps:
      - checkout # special step to check out source code to the working directory
      - restore_cache: # restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run: # install and activate virtual environment with pip
          name: Install requirements
          command: |
            cd api
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            python ./utils/nltk_downloader.py
      - save_cache: # special step to save dependency cache
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Running flask
          command: |
            cd api
            . venv/bin/activate
            python app.py
          background: true
      - run: # run tests
          name: Running tests
          command: |
            cd api
            . venv/bin/activate
            pytest tests

  end-to-end:
    working_directory: ~/end-to-end-ci
    machine:
      image: circleci/classic:latest
    steps:
      - checkout
      - run:
          name: Init env
          command: |
            git clone https://github.com/science-feedback/$ORGANIZATION_NAME-main.git
            while pgrep apt-get >/dev/null 2>&1 ; do
            echo "Waiting for apt ..."
            sleep 2
            done
            curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update
            sudo apt-get install -y nodejs yarn
            wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i google-chrome-stable_current_amd64.deb
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Run backend
          command: |
            docker-compose up
          background: true
      - run:
          name: Run frontend
          command: |
            export PATH=${PATH:44}
            export NVM_BIN=/usr/bin/nodejs
            export PATH=$NVM_BIN:$PATH
            cd webapp
            yarn install
            yarn start
          background: true
      - run:
          name: Running sandbox data import
          command: |
            dockerize -wait http://localhost/health -timeout 5m -wait-retry-interval 5s
            ./$COMMAND_NAME sandbox --name=ci
      - run:
          name: Run testcafe
          command: |
            pwd
            ls
            export PATH=${PATH:44}
            export NVM_BIN=/usr/bin/nodejs
            export PATH=$NVM_BIN:$PATH
            cd webapp
            dockerize -wait http://localhost/health -timeout 5m -wait-retry-interval 5s
            yarn test:cafe

  check-dependencies:
    working_directory: ~/api-ci # directory where steps will run
    docker: # run the steps with Docker
      - image: circleci/python:3.7.0
    steps: # a collection of executable commands
      - checkout # special step to check out source code to the working directory
      - restore_cache: # restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run: # install and activate virtual environment with pip
          name: Install requirements
          command: |
            cd api
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - run:
          name: Check outdated dependencies
          command:
            cd api
            ./scripts/check-pip-dependencies.sh

workflows:
  version: 2
  commit:
    jobs:
      - build
      - end-to-end
  schedule:
    triggers: #use the triggers key to indicate a scheduled build
      - schedule:
          cron: "0 1 * * 1" # run every monday at 1 am !!!! UTC TIME !!!!
          filters:
            branches:
              only:
                - master
    jobs:
      - check-dependencies
